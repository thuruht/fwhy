<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FAREWELL | HOWDY | KCMO - Batch Upload for Flyers</title>
  <!-- Prevent search engines from indexing this page -->
  <meta name="robots" content="noindex, nofollow">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="https://fwhy.kcmo.xyz/img/favicon.png">
  <link rel="stylesheet" href="https://fwhy.kcmo.xyz/css/ccssss.css">
  <style>
    /* Additional inline styles for layout and loading indicator */
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    #batchPreviewContainer {
    width:87%; max-width:896px;
    }
    .card {
      width: 100%;
      margin: 0 auto;
      padding: 20px;
      background: #fff;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      text-align: center;
    }
    form {
      margin: 20px 0;
    }
    input, select, textarea, button {
      margin: 8px 0;
      padding: 8px;
      font-size: 1rem;
      width: 100%;
      max-width: 999px;
    }
    .loading {
      font-style: italic;
      color: gray;
      margin-top: 10px;
    }
    .preview-card {
      border: 1px solid #ccc;
      margin: 10px;
      padding: 10px;
      text-align: left;
    }
    .ocr-status {
      font-size: 0.9rem;
      margin-top: 4px;
    }
    .feader.howder {
      transform: scale(0.44);
    }
    .instructions {
      text-align: left;
      max-width: 800px;
      margin: 0 auto;
      margin-bottom: 20px;
      line-height: 1.4;
    }
    .login-section {
      margin: 20px 0;
    }
    #fileInput {
      margin-top: 20px;
    }
  </style>
</head>
<body data-state="farewell">
  <header class="feader howder">
    <div>
      <h1 class="header-title" style="display:inline-block;">
        <span class="span2" style="color:var(--blew);">FAREWELL</span>
      </h1>
      <span style="font-size: clamp(1.3rem, 2.7vw, 2.9rem); -webkit-text-stroke: 1px #ffffff;
        text-shadow: -1px -1px 0 #ffffff, 1px -1px 0 #ffffff, -1px 1px 0 #ffffff, 1px 1px 0 #ffffff;">
        &nbsp;&amp;&nbsp;
      </span>
      <h1 class="header-title" style="display:inline-block;">
        <span class="span2" style="font-family: 'mt'; font-weight: 200; letter-spacing: 0.00209em;
          color: #ff2b13; scale: 1.16 0.8; font-size: clamp(4.5rem, 13.5vw, 21em); margin-left:22px;
          -webkit-text-stroke: 1px black; text-shadow: -1px -1px 0 #000, 1px -1px 0 #000,
          -1px 1px 0 #000, 1px 1px 0 #000, -14px 18px 0px var(--nav-border-color);">
          HOWDY
        </span>
      </h1>
    </div>
  </header>

  <main class="container">
    <div class="card">
      <h2 style="color:var(--lima)">Batch Upload</h2>
      <p>
        Welcome to the "secret" AI-powered batch flyer upload interface.</p><p>Enter the admin password once, then upload multiple flyers.</p>
      
      <p class="instructions">
        Please ensure each file is under 5MB and in a common image format
        (JPEG, PNG, GIF, WEBP). After uploading, we'll run OCR and AI extraction.
        The raw OCR (Optical Character Recognition) text goes in the description. The AI reads this if it is present, tries to fill in date/time/venue.
        Adjust as needed. Ensure all text is actually human words, etc. Select correct VENUE from dropdown! Then, if you are absolutely sure the image and listing info are correct click "Finalize" to insert into the database and slideshow. You will see blue success text with a long random string. That's good. For visual walkthrough and more details, please click this button:  <button onclick="openTutorial()">Visual Tutorial</button>

  
      </p>

      <!-- Login Form to get JWT -->
      <div class="login-section" id="loginSection">
        <label for="adminPassword">Enter Admin Password:</label>
        <input type="password" id="adminPassword" placeholder="Secret Password" required>
        <button type="button" id="loginButton">Login</button>
        <div id="loginStatus" class="loading" style="display: none;"></div>
      </div>

      <!-- File selection (hidden until logged in) -->
      <div id="uploadSection" style="display: none;">
        <label for="fileInput">Select Flyer Images (multiple allowed):</label>
        <input type="file" id="fileInput" accept="image/*" multiple>
        <!-- Container for dynamically generated preview cards -->
        <div id="batchPreviewContainer"></div>
      </div>

      <div id="loadingIndicator" class="loading" style="display:none;">Loading OCR data, please waitâ€¦</div>
    </div>
  </main>

  <script>
    // Adjust to point to your Worker route
    // For example, "https://farewellcafe.com/fygw0" or "https://fygw0.kcmo.xyz"
    const WORKER_BASE_URL = 'https://fygw0.kcmo.xyz';

    let adminToken = ''; // We'll store the JWT after login

    const loginSection = document.getElementById('loginSection');
    const adminPasswordInput = document.getElementById('adminPassword');
    const loginButton = document.getElementById('loginButton');
    const loginStatus = document.getElementById('loginStatus');

    const uploadSection = document.getElementById('uploadSection');
    const fileInput = document.getElementById('fileInput');
    const batchPreviewContainer = document.getElementById('batchPreviewContainer');
    const loadingIndicator = document.getElementById('loadingIndicator');

    // Show/hide a loading indicator
    function showLoading(show = true) {
      loadingIndicator.style.display = show ? 'block' : 'none';
    }

    // 1) Login to get JWT
    loginButton.addEventListener('click', async () => {
      const pw = adminPasswordInput.value.trim();
      if (!pw) {
        alert("Please enter the admin password!");
        return;
      }
      loginStatus.style.display = 'block';
      loginStatus.textContent = 'Logging in...';

      try {
        const res = await fetch(`${WORKER_BASE_URL}/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password: pw })
        });
        if (!res.ok) {
          const errData = await res.json().catch(() => ({}));
          throw new Error(errData.message || `Login failed with status ${res.status}`);
        }
        const data = await res.json();
        adminToken = data.token;
        loginStatus.textContent = 'Login successful!';
        // Hide login, show upload
        loginSection.style.display = 'none';
        uploadSection.style.display = 'block';
      } catch (err) {
        loginStatus.textContent = 'Error: ' + err.message;
      }
    });

    // 2) Handle file selection (upload each file, do OCR, AI, etc.)
    fileInput.addEventListener('change', (e) => {
      const files = e.target.files;
      if (!files || files.length === 0) return;
      batchPreviewContainer.innerHTML = ''; // Clear existing previews
      Array.from(files).forEach((file) => createPreviewCard(file));
    });

    // Step A: Upload file to R2 => returns { imageUrl }
    async function uploadFileToR2(file) {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch(`${WORKER_BASE_URL}/upload-file`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${adminToken}`
        },
        body: formData
      });
      if (!response.ok) {
        const err = await response.json().catch(() => ({}));
        throw new Error(err.message || `Upload error, status ${response.status}`);
      }
      return await response.json();
    }

    // Step B: OCR => returns { ParsedResults: [{ ParsedText: "..." }] }
    async function extractTextFromImage(imageUrl) {
      const formData = new FormData();
      formData.append('imageUrl', imageUrl);

      const resp = await fetch(`${WORKER_BASE_URL}/ocr`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${adminToken}` },
        body: formData
      });
      if (!resp.ok) {
        const textErr = await resp.text();
        throw new Error(`OCR failed: ${textErr}`);
      }
      const data = await resp.json();
      const text = data?.ParsedResults?.[0]?.ParsedText || '';
      return text;
    }

    // Step C: AI => returns { date, time, venue } or error
    async function processOcrText(ocrText) {
      const resp = await fetch(`${WORKER_BASE_URL}/process-ocr`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${adminToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ ocrText })
      });
      if (!resp.ok) {
        const textErr = await resp.text();
        throw new Error(`AI extraction failed: ${textErr}`);
      }
      return await resp.json();
    }

    // Step D: Finalize => inserts flyer row in DB
    async function finalizeFlyer(data) {
      const resp = await fetch(`${WORKER_BASE_URL}/finalize`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${adminToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      if (!resp.ok) {
        const errData = await resp.json().catch(() => ({}));
        throw new Error(errData.message || `Finalize error, status ${resp.status}`);
      }
      return await resp.json();
    }

    // Create a preview card for each selected file
    async function createPreviewCard(file) {
      const card = document.createElement('div');
      card.classList.add('preview-card');
      batchPreviewContainer.appendChild(card);

      // Show thumbnail
      const img = document.createElement('img');
      img.style.maxWidth = "69%";
      img.style.height = "auto";
      card.appendChild(img);

      const reader = new FileReader();
      reader.onload = (ev) => {
        img.src = ev.target.result;
      };
      reader.readAsDataURL(file);

      // Status text
      const descStatus = document.createElement('div');
      descStatus.classList.add('ocr-status');
      descStatus.textContent = 'Uploading file...';
      descStatus.style.color = 'gray';
      card.appendChild(descStatus);

      // Venue select
      const typeSelect = document.createElement('select');
      const optionHowdy = document.createElement('option');
      optionHowdy.value = "howdy";
      optionHowdy.textContent = "Howdy";
      const optionFarewell = document.createElement('option');
      optionFarewell.value = "farewell";
      optionFarewell.textContent = "Farewell";
      typeSelect.appendChild(optionHowdy);
      typeSelect.appendChild(optionFarewell);
      card.appendChild(typeSelect);

      // Title
      const titleInput = document.createElement('input');
      titleInput.type = "text";
      titleInput.placeholder = "Event Title";
      card.appendChild(titleInput);

      // Date
      const dateInput = document.createElement('input');
      dateInput.type = "date";
      card.appendChild(dateInput);

      // Time
      const timeInput = document.createElement('input');
      timeInput.type = "text";
      timeInput.placeholder = "Event Time (e.g., 7:00 PM)";
      card.appendChild(timeInput);

      // Description
      const descTextarea = document.createElement('textarea');
      descTextarea.placeholder = "Description (raw OCR text goes here)";
      descTextarea.style.width = "100%";
      card.appendChild(descTextarea);

      // Finalize button
      const finalizeBtn = document.createElement('button');
      finalizeBtn.textContent = 'Finalize Flyer';
      finalizeBtn.disabled = true;
      card.appendChild(finalizeBtn);

      // Upload + OCR + AI
      let imageUrl = '';
      try {
        // Step A: Upload to R2
        showLoading(true);
        const uploadData = await uploadFileToR2(file);
        imageUrl = uploadData.imageUrl;
        descStatus.textContent = 'Upload complete. Running OCR...';

        // Step B: OCR
        const ocrText = await extractTextFromImage(imageUrl);
        descTextarea.value = ocrText;
        if (ocrText.trim()) {
          descStatus.textContent = 'OCR done. Attempting AI extraction...';
          descStatus.style.color = 'green';

          // Step C: AI
          try {
            const aiData = await processOcrText(ocrText);
            if (aiData.date) {
              dateInput.value = aiData.date;
            }
            if (aiData.time) {
              timeInput.value = aiData.time;
            }
            if (aiData.venue) {
              typeSelect.value = aiData.venue;
            }
            descStatus.textContent = 'AI extraction complete.';
          } catch (err) {
            console.warn("AI error:", err);
            descStatus.textContent = 'AI extraction failed. Fill in manually.';
            descStatus.style.color = 'red';
          }
        } else {
          descStatus.textContent = 'No OCR text found. Fill in manually.';
          descStatus.style.color = 'red';
        }
      } catch (err) {
        console.error("Upload/OCR/AI error:", err);
        descStatus.textContent = `Error: ${err.message}`;
        descStatus.style.color = 'red';
      } finally {
        showLoading(false);
        finalizeBtn.disabled = false;
      }

      // Step D: Finalize
      finalizeBtn.addEventListener('click', async () => {
        finalizeBtn.disabled = true;
        descStatus.textContent = 'Finalizing...';

        const flyerData = {
          imageUrl,
          title: titleInput.value,
          date: dateInput.value,
          time: timeInput.value,
          venue: typeSelect.value,
          description: descTextarea.value
        };

        try {
          const result = await finalizeFlyer(flyerData);
          if (result.success) {
            descStatus.textContent = `Flyer finalized! ID: ${result.flyerId}`;
            descStatus.style.color = 'blue';
          } else {
            descStatus.textContent = `Finalize error: ${result.message || 'Unknown'}`;
            descStatus.style.color = 'red';
            finalizeBtn.disabled = false;
          }
        } catch (err) {
          console.error("Finalize error:", err);
          descStatus.textContent = `Finalize failed: ${err.message}`;
          descStatus.style.color = 'red';
          finalizeBtn.disabled = false;
        }
      });
    }
  </script>
    <script>
        function openTutorial() {
            window.open('upload_tutorial.html', 'UploadTutorial', 'width=800,height=900,fullscreen=yes');
        }
    </script>
</body>
</html>
